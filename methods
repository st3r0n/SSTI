an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. 
example of vulnerable code that can cause ssti ---> $output = $twig->render("Dear " . $_GET['name']);    here name parameter is passed directly


exploitation in SSTI includes
detect ------> identify -------> exploit

DETECT
${{<%[%'"}}%\   ----> easiest way of detection    -----> see if any exception is raised

context detection
i. palintext
sometimes you may think it is XSS but using mathematical function such as {{7*7}} which evaluates to 49 can give idea if it is XSS or SSTI
ii. code context
greeting = getQueryParameter('greeting')
engine.render("Hello {{"+greeting+"}}", data)------> here we have to get out of {{}} then we can use data.username}}<tag> ---> this tag if rendered then we can confirm SSTI is PRESENT


IDENTIFY
use decision tree to find out


EXPLOITATION
1.once SSTI is deected and template is identified we can read codumataionor hacktrickz to find code to inject to get RCE

2. in code context try  any-useful data such as user.name}}{{7*7}}   ----> such that is execute code

3.look at security section of documetation as it can give idea how we can exploit SSTI

4. look for known exploits

5.try to explore the template wither by using environment varibale using getenv or printenv

developer supplied objects--->   sometimes developer objects can give us sensitive info  ----> they can be accessed using debug features or troubleshoot features in an application
so we can look for it
